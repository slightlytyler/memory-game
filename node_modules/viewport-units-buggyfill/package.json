{
  "name": "viewport-units-buggyfill",
  "version": "0.4.1",
  "title": "Viewport Units Buggyfill for Mobile Safari",
  "description": "Making viewport units (vh|vw|vmin|vmax) work properly in Mobile Safari",
  "homepage": "http://github.com/rodneyrehm/viewport-units-buggyfill/",
  "author": {
    "name": "Rodney Rehm",
    "url": "http://rodneyrehm.de"
  },
  "contributors": [
    {
      "name": "Zoltan Hawryluk",
      "url": "http://www.useragentman.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/rodneyrehm/viewport-units-buggyfill.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license"
    }
  ],
  "keywords": [
    "ios",
    "safari",
    "viewport"
  ],
  "main": "./viewport-units-buggyfill.js",
  "files": [
    "viewport-units-buggyfill.js",
    "viewport-units-buggyfill.hacks.js"
  ],
  "scripts": {
    "lint": "grunt lint"
  },
  "devDependencies": {
    "jshint-stylish": "~0.1.5",
    "grunt": "~0.4.2",
    "grunt-contrib-jshint": "~0.8.0"
  },
  "readme": "# Viewport Units Buggyfill™\n\nThis is a *buggyfill* (fixing bad behavior), not a *polyfill* (adding missing behavior). That said, it provides hacks for you to get viewport units working in old IE as well. If the browser doesn't know how to deal with the [viewport units](http://www.w3.org/TR/css3-values/#viewport-relative-lengths) - `vw`, `vh`, `vmin` and `vmax` - it won't gain the capability through this script, because this buggyfill uses the [CSSOM](http://dev.w3.org/csswg/cssom/) to access the defined styles. The hacks abuse CSS properties like `filter` and `content` to get the values across.\n\nIt does, however, accomodate browsers that have partial, but not full support for vmin/vmax units.\n\nThe buggyfill iterates through all defined styles the document knows and extracts those that uses a viewport unit. After resolving the relative units against the viewport's dimensions, CSS is put back together and injected into the document in a `<style>` element. Listening to the `orientationchange` event allows the buggyfill to update the calculated dimensions accordingly.\n\n> Note: This buggyfill only works on stylesheets! viewport units used in `style` attributes are *not* resolved.\n\nAmongst other things, the buggyfill helps with the following problems:\n\n* viewport units inside `calc()` expressions in Mobile Safari and IE9+\n* viewport units (vh|vw|vmin|vmax) in Mobile Safari and IE9+\n\n\n## Using viewport-units-buggyfill\n\nAfter loading the buggyfill from npm (`npm install viewport-units-buggyfill`) or bower (`bower install viewport-units-buggyfill`), it has to be required and initialized:\n\n```js\nrequire('viewport-units-buggyfill').init();\n```\n\nIf you're - for whatever reason - not using a package manager, include the script as follows:\n\n```html\n<script src=\"viewport-units-buggyfill.js\"></script>\n<script>window.viewportUnitsBuggyfill.init();</script>\n```\n\nTo engage the buggyfill with hacks, pass them in at initialization:\n\n```js\nvar hacks = require('viewport-units-buggyfill.hacks');\nrequire('viewport-units-buggyfill').init({\n  hacks: hacks\n});\n```\n\n## API\n\n`viewport-units-buggyfill` exposes the following API:\n\n```js\nvar viewportUnitsBuggyfill = require('viewport-units-buggyfill');\n\n// find viewport-unit declarations,\n// convert them to pixels,\n// inject style-element into document,\n// register orientationchange event (and resize events in IE9+) to repeat when necessary\n// will only engage for Mobile Safari on iOS and IE9+\nviewportUnitsBuggyfill.init();\n\n// ignore user agent force initialization\nviewportUnitsBuggyfill.init({force: true});\n\n// reduces the amount of times the buggyfill is reinitialized on window resize in IE\n// for performance reasons.\nviewportUnitsBuggyfill.init({refreshDebounceWait: 250});\n\n// This tells the browser where the 'contentHack' and 'behaviorHack'\n// code is (see the next two options below). This *must* be used\n// in conjunction with the following code\n// inside the HTML:\n//\n//   <script src=\"/path/to/viewport-units-buggyfill.hacks.js\"></script>\n//\nviewportUnitsBuggyfill.init({hacks: window.viewportUnitsBuggyfillHacks});\n\n// allows the use of css hacks inside the CSS content property\n// for iOS Safari. This includes vmax (iOS6 Safari)\n// as well as viewport units in calc expressions (iOS Safari).\n// See changelog for version 0.4.0 to see details on how this works.\nviewportUnitsBuggyfill.init({contentHack: true});\n\n// allows the use of css hacks inside the CSS behavior property\n// for IE9+. This includes vmax units\n// as well as viewport units in calc expressions involving vmin\n// and vmax.\n// See changelog for version 0.4.0 to see details on how this works.\nviewportUnitsBuggyfill.init({behaviorHack: true});\n\n// update internal declarations cache and recalculate pixel styles\n// this is handy when you add styles after .init() was run\nviewportUnitsBuggyfill.refresh();\n\n// you can do things manually (without the style-element injection):\n// identify all declarations using viewport units\nviewportUnitsBuggyfill.findProperties();\nvar cssText = viewportUnitsBuggyfill.getCss();\n```\n\n## Cross Origin Stylesheets\n\n**Warning:** Including stylesheets from third party services, like Google WebFonts, requires those resources to be served with appropriate CORS headers.\n\n## Changelog\n\n### 0.4.1 (September 8th 2014) ###\n\n* fixing `bower.json` (… narf)\n\n### 0.4.0 (September 8th 2014) ###\n\n* fixes IE9 and Safari native way of calculating viewport units differently inside of a frame. Without this buggyfill, IE9 will assume the `100vw` and `100vh` to be the width and height of the parent document’s viewport, while Safari for iOS will choose 1px (!!!!) for both.\n* fixes IE9's issue when calculate viewport units correctly when changing media-query breakpoints.\n* adds `vmin` support for IE9 (instead of `vm`, IE9's equivalent to vmin)  and `vmax` support to IE9 and 10. (Note that this will only work when initializing with `viewportUnitsBuggyfill.init({hacks: window.viewportUnitsBuggyfillHacks, behaviorHack: true});`) and adding the `viewport-units-buggyfill.hacks.js` to the page after `viewport-units-buggyfill.js`.\n\n```css\n.myLargeBlock {\n  /* Non-IE browsers */\n  width: 50vmin;\n  height: 50vmax;\n\n  /* IE9 and 10 */\n  behavior: 'use_css_behavior_hack: true; width: 50vmin; height: 50vmax;';\n}\n```\n* adds the ability for viewport units to be used inside of calc() expressions in iOS Safari and IE9+, via the use of the `content` CSS property.  This seems like a good compromise since `content` is only valid inside `::before` and `::after` rules (as a result, it is not recommended use this hack inside of these rules).  (Note that this will only work when initializing with `viewportUnitsBuggyfill.init({hacks: window.viewportUnitsBuggyfillHacks, contentHack: true});`) and adding the `viewport-units-buggyfill.hacks.js` to the page after `viewport-units-buggyfill.js`.\n\n```css\n.box {\n  top: calc(50vh - 100px);\n  left: calc(50vw - 100px);\n\n  /*\n   * Here is the code for WebKit browsers that will allow\n   * viewport-units-buggyfill.js to perform calc on viewport\n   * units.\n   */\n  content: 'use_css_content_hack: true; top: calc(50vh -  100px); left: calc(50vw -  100px);';\n}\n```\n\n* Using the above 'contentHack' trick, one can also add support for vmax support in Safari for the older iOS6\n* Adds support for viewport units inside of IE's `filter` property (a.k.a. Visual Filters).\n* Added debounce initialization parameter, if it is desirable to not have IE9+ fire the polyfill so many times on a resize event.\n\n\n### 0.3.1 (April 16th 2014) ###\n\n* fixing browser detection to include UIWebView - Issue #7, [tylerstalder](https://github.com/tylerstalder)\n\n### 0.3.0 (April 9th 2014) ###\n\n* fixing cross origin resource problem with CSSOM - Issue #6\n\n### 0.2.3 (March 10th 2014) ###\n\n* fixing multiple competing media-attribute-switched stylesheets - [Issue #5](https://github.com/rodneyrehm/viewport-units-buggyfill/issues/5)\n* fixing double initialization and call of `reresh()` without being initialized - [Issue #3](https://github.com/rodneyrehm/viewport-units-buggyfill/issues/3)\n* fixing `<br>`s caused by `innerText` by using `textContent` instead\n\n### 0.2.2 (January 31st 2014) ###\n\n* fixing unhandled empty `<style>` elements - [Issue #2](https://github.com/rodneyrehm/viewport-units-buggyfill/issues/2)\n\n### 0.2.1 (January 25th 2014) ###\n\n* adding `force` option to `init()`\n* fixing the handling of non-iterable CSSRules - [Issue #1](https://github.com/rodneyrehm/viewport-units-buggyfill/issues/1)\n\n### 0.2.0 (January 24th 2014) ###\n\n* optimizing generated CSS (by grouping selectors)\n* adding browser sniffing\n\n### 0.1.0 (January 23rd 2014) ###\n\n* Initial Version\n\n\n## License\n\nviewport-unit-buggyfill is published under the [MIT License](http://opensource.org/licenses/mit-license).\n\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/rodneyrehm/viewport-units-buggyfill/issues"
  },
  "_id": "viewport-units-buggyfill@0.4.1",
  "_shasum": "ddae3a77a66dc8328ba2b85a070c3c85d535890c",
  "_from": "viewport-units-buggyfill@",
  "_resolved": "https://registry.npmjs.org/viewport-units-buggyfill/-/viewport-units-buggyfill-0.4.1.tgz"
}
